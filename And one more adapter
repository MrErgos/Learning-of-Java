//★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
import java.util.*;                                                                                                                                                                                                        
import java.io.*;
import Solution.Person;
import java.text.SimpleDateFormat;
import java.text.ParseException;
/*              
 И еще один адаптер

 Адаптировать Scanner к PersonScanner.
 Классом-адаптером является PersonScannerAdapter.
 В классе адаптере создать приватное финальное поле Scanner fileScanner. Поле инициализировать в конструкторе с одним аргументом типа Scanner.

 Данные в файле хранятся в следующем виде:
 Иванов Иван Иванович 31 12 1950
 Петров Петр Петрович 31 12 1957

 В файле хранится большое количество людей, данные одного человека находятся в одной строке. Метод read() должен читать данные только одного человека.
 
 ****************************************          
 And one more adapter

 Adapt Scanner to PersonScanner.
 The adapter class is PersonScannerAdapter.
 In the adapter class, create a private final field Scanner fileScanner.  The field is initialized in a constructor with one argument of type Scanner.

 The data in the file is stored as follows:
 Ivanov Ivan Ivanovich 31 12 1950
 Petrov Petr Petrovich 31 12 1957

 A large number of people are stored in the file, the data of one person is on one line.  The read () method should only read one person's data.
 
 */                                                                                                                                                                                                                                                          
public class Solution {                                                  

    public static void main(String[] args) throws IOException{       
		Scanner scan = new Scanner(new FileReader(args[0]));
		PersonScannerAdapter psa = new PersonScannerAdapter(scan);
		System.out.println(psa.read().toString());
    }                                                  

    public static class PersonScannerAdapter implements PersonScanner{                                                  
		private Scanner fileScanner;
		
		public PersonScannerAdapter(Scanner scanner)
		{
			this.fileScanner = scanner;
		}

		@Override
		public Solution.Person read() throws IOException
		{
			try
			{
			String[] array = fileScanner.nextLine().split(" ",4);
			Date date = new SimpleDateFormat("dd MM yyyy").parse(array[3]);
			Solution.Person person = new Solution().new Person(array[1],array[2],array[0],date);
			return person;
			}
			catch (ParseException e){}
			return null;
		}

		@Override
		public void close() throws IOException
		{
			fileScanner.close();
		}


		
		
    }      
	
	public class Person {                                                  
		private String firstName;                                                  
		private String middleName;                                                  
		private String lastName;                                                  
		private Date birthDate;                                                  

		public Person(String firstName, String middleName, String lastName, Date birthDate) {                                                  
			this.firstName = firstName;                                                  
			this.middleName = middleName;                                                  
			this.lastName = lastName;                                                  
			this.birthDate = birthDate;                                                  
		}                                                  

		@Override                                                  
		public String toString() {                                                  
			return String.format("%s %s %s %s", lastName, firstName, middleName, birthDate.toString());                                                  
		}                                                  
	}     
	
	public interface PersonScanner {                                                  
		Person read() throws IOException;                                                  

		void close() throws IOException;                                                  
	}      
}                                 
