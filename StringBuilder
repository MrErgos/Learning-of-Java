import java.util.LinkedList;                                                  
import java.util.List;
import java.io.*;                                                  

/*                                                   
 StringBuilder                                                 
 */                                                  
public class Solution {                                                  
    public static List<Pair> result = new LinkedList<>();                                                  

    public static void main(String[] args) {                                                  
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		try{
		    FileReader file = new FileReader(args[1]);
		    reader = new BufferedReader(file);
		   }
		catch (IOException e){
			System.out.println("File couldn't read");
		}
		String[] buffer = null;
		try{
            buffer = reader.readLine().split(" ");
		}
		catch (IOException e){
			System.out.println("String couldn't read");
		}
		StringBuilder[] strBulArray = new StringBuilder[buffer.length];
		int i = 0;
		for (String s : buffer){
			strBulArray[i] = new StringBuilder(s);
			i++;
		}
		
		for (i = 0;i<strBulArray.length;i++){
			for (int j = 0;j<strBulArray.length;j++){
				System.out.println(strBulArray[i] + ":" + strBulArray[j].reverse());
				if (strBulArray[i].equals(strBulArray[j]) && (i!=j)){
					result.add(new Pair(strBulArray[i],strBulArray[j]));
					break;
				}
			}
		}
		for (Pair p : result){
			System.out.println(p.toString());
		}
    }                                                  

    public static class Pair {                                                  
        String first;                                                  
        String second;                                                  
		public Pair(StringBuilder a, StringBuilder b){
			first = a.toString();
			second = b.toString();
		}
        @Override                                                  
        public boolean equals(Object o) {                                                  
            if (this == o) return true;                                                  
            if (o == null || getClass() != o.getClass()) return false;                                                  

            Pair pair = (Pair) o;                                                  

            if (first != null ? !first.equals(pair.first) : pair.first != null) return false;                                                  
            return second != null ? second.equals(pair.second) : pair.second == null;                                                  

        }                                                  

        @Override                                                  
        public int hashCode() {                                                  
            int result = first != null ? first.hashCode() : 0;                                                  
            result = 31 * result + (second != null ? second.hashCode() : 0);                                                  
            return result;                                                  
        }                                                  

        @Override                                                  
        public String toString() {                                                  
            return first == null && second == null ? "" :                                                  
				first == null ? second :                                                  
				second == null ? first :                                                  
				first.compareTo(second) < 0 ? first + " " + second : second + " " + first;                                                  

        }                                                  
    }                                                  

}       
